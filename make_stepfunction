#!/usr/bin/env python3

import os
import sys
import argparse
import numpy as np
import pandas as pd

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

parser = argparse.ArgumentParser(description = """
Converts point data for plotting it as step function.

Gets a list of data and two column indices for the x- and y-column respectively.
Returns a list of (x,y) pairs that describe a step function of the original data.
By default, the original x-value will be positioned in the middle of the step.
""")

parser.add_argument('-x', help='x column label')
parser.add_argument('-y', help='y column label')
parser.add_arguments('-p', '--position', choices=('center','left','right'), default='center',
					help = 'position of the original data point: middle, start, end [default="%default"]')
parser.add_argument('file', help='name of data file')

args = parser.parse_args()

args.x = int(args.x)-1 if args.x.isdigit() else args.x
args.y = int(args.y)-1 if args.y.isdigit() else args.y

if os.path.exists(args.file):
    with open(args.file) as f:
        content = f.read()                                     # parse the given file
else:
    content = sys.stdin.read()                                 # or default to stdin

data = np.hstack((pd.read_csv(StringIO(content),
                              sep='\s+',
                              comment='#',
                              usecols=[args.x],
                             ).to_numpy().astype(float),
                  pd.read_csv(StringIO(content),
                              sep='\s+',
                              comment='#',
                              usecols=[args.y],
                             ).to_numpy().astype(float)))

stepdata = []																# create step data
if options.position == 'left':
	for i in range(len(data)-1):
		stepdata.extend([[data[i  ][0], data[i][1]],
						 [data[i+1][0], data[i][1]]])
	stepdata.append(data[-1])

elif options.position == 'right':
	stepdata.append(data[0])
	for i in range(1,len(data)):
		stepdata.extend([[data[i-1][0], data[i][1]],
						 [data[i  ][0], data[i][1]]])

elif options.position == 'center':
	stepdata.append([1.5*data[0][0]-0.5*data[1][0], data[0][1]])
	for i in range(1,len(data)):
		stepdata.extend([[0.5*(data[i-1][0]+data[i][0]), data[i-1][1]],
						 [0.5*(data[i-1][0]+data[i][0]), data[i  ][1]]])
	stepdata.append([1.5*data[-1][0]-0.5*data[-2][0], data[-1][1]])

for item in stepdata:														# output data to stdout
	print(f'{item[0]}\t{item[1]}')
