#!/usr/bin/env python

import os,sys,re
from optparse import OptionParser, OptionGroup, Option, SUPPRESS_HELP

# -----------------------------
class MyOption(Option):
# -----------------------------
# used for definition of new option parser action 'extend', which enables to take multiple option arguments
# taken from online tutorial http://docs.python.org/library/optparse.html
  
  ACTIONS = Option.ACTIONS + ("extend",)
  STORE_ACTIONS = Option.STORE_ACTIONS + ("extend",)
  TYPED_ACTIONS = Option.TYPED_ACTIONS + ("extend",)
  ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + ("extend",)

  def take_action(self, action, dest, opt, value, values, parser):
    if action == "extend":
      lvalue = value.split(",")
      values.ensure_value(dest, []).extend(lvalue)
    else:
      Option.take_action(self, action, dest, opt, value, values, parser)

# -----------------------------

parser = OptionParser(option_class=MyOption, usage='%prog [options] label(s) [datafile]', description = """
return datafile name and ID(s) of all valid label(s) to be used with plot[_distribution].gri
""")

parser.add_option('-c','--comma',
                  action = 'store_const',
                  const = ',',
                  dest = 'separator',
                  help = 'set column output separator to ","')

parser.set_defaults(separator = ' ')

(options, columns) = parser.parse_args()

if len(columns) < 1:
  parser.error('no labels specified.')

if not sys.stdin.isatty():
  file = {'name':None, 'input':sys.stdin,}
elif os.path.exists(columns[-1]):
  name = columns.pop()
  file = {'name':name, 'input':open(name),}
else:
  parser.error('file "{}" not found.'.format(columns[-1]))

i = -1
for line in file['input']:
  i += 1
  if i == 0:
    m = re.search('(\d+)\s+head', line.lower())
    target = int(m.group(1)) if m else 0
  if i == target: break

file['input'].close()

headers = map(lambda s:re.sub(r'^["\']|["\']$', '', s), 
              re.findall(r'(?:[^\s,"]|"(?:\\.|[^"])*")+', line))

print '\t'.join(([file['name']] if file['name'] else []) +
                [options.separator.join(map(str,[1+headers.index(heading) for heading in columns if heading in headers]))]
               )
