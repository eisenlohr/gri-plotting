.axesfont. = 11
.labelfont. = 9
.tickfont. = 9
.infofont. = 3
.symbolsize. = 0.15

.mandatorycount. = 9
.argcount. = 2                                                            # filename column

new \
  .noise. \
  .invert. \
  .weightcolumn. \
  \total \
  .offset. \
  \bgcolor \
  .back. \
  .clip. \
  .tight. \
  .line. .ownline. .ownlinewidth. \line .linewidth. \
  .color. .owncolor. \color .colormap. .owncolormap. \colormap \
  .curvelabel. \
  .axislabelx. .axislabely. \
  .abs. .pos. .neg. \
  .skip. \
  .secondx. \
  \ylabel \
  .aspect. \
  .transpose. \
  .frame. .inch. \
  .arg. .datastart. \
  .nGray. .nRed. .nOrange. .nYellow. .nGreen. .nCyan. .nBlue. .nPurple. .nMagenta. \
  .iGray. .iRed. .iOrange. .iYellow. .iGreen. .iCyan. .iBlue. .iPurple. .iMagenta. \
  .iHSB. .nHSB. \
  .hue. .saturation. .brightness.

.transpose. = 0
.total. = 0

.ownline. = 0
.ownlinewidth. = 0
\linewidth = ""

.color. = 0
.owncolor. = 0
\color = ""
.colormap. = 1
.owncolormap. = 0
\colormap = ""

.curvelabel. = 0
.axislabelx. = 1
.axislabely. = 1

\weighted = ""
\inverted = ""
\restriction = ""
\skip = ""
\offset = ""

.nGray. = 0
.nRed. = 0
.nOrange. = 0
.nYellow. = 0
.nGreen. = 0
.nCyan. = 0
.nBlue. = 0
.nPurple. = 0
.nMagenta. = 0

.iGray. = 0
.iRed. = 0
.iOrange. = 0
.iYellow. = 0
.iGreen. = 0
.iCyan. = 0
.iBlue. = 0
.iPurple. = 0
.iMagenta. = 0


.arg. = 0


# common functions

#-------------------------------------------------------------------------
`set_SB &.S. &.B. .i. .N.'
{
  \.word1. = {rpn \.word3. \.word4. /}            # saturation from pure to no hue visible
  \.word2. = {rpn 1 \.word3. 1 - \.word4. / - sqrt }  # brightness from bright towards dark
}

#-------------------------------------------------------------------------
`set_graySB &.S. &.B. .i. .N.'
{
  \.word1. = 0                                    # zero saturation => gray scale
  \.word2. = {rpn 1 \.word3. \.word4. / - 0.9 power} # brightness from bright towards dark
}

#-------------------------------------------------------------------------
`get_stringOrNumber "\key" &.pos. &\string .defaultString. &.number. .defaultNumber.'
{
  if {rpn "\.word1." \.word2. 1 + argv ==}        # check match
    \.word3.  = {rpn \.word2. 2 + argv}           # assign string value
    \.word5.  = {rpn \.word2. 2 + argv atof}      # assign numeral value
    \.word2. += 2                                 # advance position
  else if {rpn \.words. 7 ==}                     # has default?
    \.word3. = "\.word4."                         # assign if key not found
    \.word5. = \.word6.                           # assign if key not found
  end if
  if ..debug..
    show "string  : \.word1.  \.word3.    default  '\.word4.'"
    show "number  : \.word1.  \.word5.    default  '\.word6.'"
  end if
}

#-------------------------------------------------------------------------
`get_string "\key" &.pos. &\string .default.'
{
  if {rpn "\.word1." \.word2. 1 + argv ==}        # check match
    \.word3.  = {rpn \.word2. 2 + argv}           # assign value
    \.word2. += 2                                 # advance position
  else if {rpn \.words. 5 ==}                     # has default?
    \.word3. = "\.word4."                         # assign if key not found
  end if
  if ..debug..
    show "string  : \.word1.  \.word3.    default  '\.word4.'"
  end if
}

#-------------------------------------------------------------------------
`get_number "\key" &.pos. &.number. .default.'
{
  if {rpn "\.word1." \.word2. 1 + argv ==}        # check match
    \.word3.  = {rpn \.word2. 2 + argv atof}      # assign value
    \.word2. += 2                                 # advance position
  else if {rpn \.words. 5 ==}                     # has default?
    \.word3. = \.word4.                           # assign if key not found
  end if
  if ..debug..
    show "number  : \.word1. " \.word3. "   default " \.word4.
  end if
}

#-------------------------------------------------------------------------
`get_logical "\key" &.pos. &.flag. .default.'
{
  if {rpn "\.word1." \.word2. 1 + argv ==}        # check match
    \.word3.  = 1                                 # make flag true
    \.word2. += 1                                 # advance position
  else if {rpn \.words. 5 ==}                     # has default?
    \.word3. = \.word4.                           # assign if key not found
  end if
  if ..debug..
    show "logical : \.word1. " \.word3. "   default " \.word4.
  end if
}

#-------------------------------------------------------------------------
`get_bitfield "\both" "\first" "\second" &.pos. &.first. &.second.'
{
  new \arg
  \arg = {rpn \.word4. 1 + argv}
  if      {rpn "\.word1." "\arg" ==}              # check both
    \.word5. = 1
    \.word6. = 1
    \.word4. += 1                                 # advance position
  else if {rpn "\.word2." "\arg" ==}              # check first
    \.word5. = 1
    \.word6. = 0
    \.word4. += 1                                 # advance position
  else if {rpn "\.word3." "\arg" ==}              # check second
    \.word5. = 0
    \.word6. = 1
    \.word4. += 1                                 # advance position
  else
    \.word5. = 0
    \.word6. = 0
  end if
  if ..debug..
    show "bitfield: \.word1. " \.word5. " " \.word6.
  end if
}


#-------------------------------------------------------------------------
`the_layout'
{
  set font to Times
  set font size .axesfont.
  set line width axis 0.5

  if .tight.
    .leftmargin.    = {rpn ..linewidthaxis.. 0.5 * pttocm}
    .rightmargin.   = {rpn ..linewidthaxis.. 1.5 * pttocm}
    .bottommargin.  = {rpn ..linewidthaxis.. 0.5 * pttocm}
    .topmargin.     = {rpn ..linewidthaxis.. 1.5 * pttocm}
  else
    .leftmargin.    = 0.4
    .rightmargin.   = 0.4
    .bottommargin.  = 0.4
    .topmargin.     = 0.4
  end if

  if .transpose.

    if .axislabelx.
      .leftmargin.   = {rpn "\xtickmin" width "\xtickmax" width sup "\xlabel" ascent "\xlabel" descent + 2 * + .leftmargin. sup}
      .bottommargin. = {rpn "\xtickmin" ascent "\xtickmin" descent + .bottommargin. sup}
      .topmargin.    = {rpn "\xtickmax" ascent "\xtickmax" descent + .topmargin. sup}
    end if
    if .secondx.
      .rightmargin.  = {rpn "\x2tickmin" width "\x2tickmax" width sup "\x2label" ascent "\x2label" descent + 2 * + .rightmargin. sup}
      .bottommargin. = {rpn "\x2tickmin" ascent "\x2tickmin" descent + .bottommargin. sup}
      .topmargin.    = {rpn "\x2tickmax" ascent "\x2tickmax" descent + .topmargin. sup}
    end if

    if .axislabely.
      .leftmargin.   = {rpn "\ytickmin" width 2 / .leftmargin. sup}
      .rightmargin.  = {rpn "\ytickmax" width 2 / .rightmargin. sup}
      .bottommargin. = {rpn "\ylabel" ascent "\ylabel" descent + 3 * .bottommargin. sup}
    end if

  else

    if .axislabelx.
      .leftmargin.   = {rpn "\xtickmin" width 2 / .leftmargin. sup}
      .rightmargin.  = {rpn "\xtickmax" width 2 / .rightmargin. sup}
      .bottommargin. = {rpn "\xlabel" ascent "\xlabel" descent + 3 * .bottommargin. sup}
    end if
    if .secondx.
      .leftmargin.   = {rpn "\x2tickmin" width 2 / .leftmargin. sup}
      .rightmargin.  = {rpn "\x2tickmax" width 2 / .rightmargin. sup}
      .topmargin.    = {rpn "\x2label" ascent "\x2label" descent + 3 * .topmargin. sup}
    end if

    if .axislabely.
      .leftmargin.   = {rpn "\ytickmin " width "\ytickmax " width sup "\ylabel" ascent "\ylabel" descent + 2 * + .leftmargin. sup}
      .bottommargin. = {rpn "\ytickmin" ascent "\ytickmin" descent + .bottommargin. sup}
      .topmargin.    = {rpn "\ytickmax" ascent "\ytickmax" descent + .topmargin. sup}
    end if

  end if

  if .frame.
    .diagramsize. = .size.
    .size. = {rpn .leftmargin. .rightmargin. + .diagramsize. +}
  else
    .diagramsize. = {rpn .size. .leftmargin. .rightmargin. + - }
  end if

  set bounding box 0 0 .size. {rpn .bottommargin. .topmargin. + .aspect. .diagramsize. * +} cm
  set x margin .leftmargin.
  set y margin .bottommargin.
  set x size .diagramsize.
  set y size {rpn .aspect. .diagramsize. *}

  if ..debug..
   show "margin left   " .leftmargin.
   show "margin right  " .rightmargin.
   show "margin top    " .topmargin.
   show "margin bottom " .bottommargin.
  end if
}

#-------------------------------------------------------------------------
`the_background'
{
  if {rpn "\bgcolor" "" !=}
     set color \bgcolor
     draw box filled .leftmargin. {rpn .bottommargin. .aspect. .diagramsize. * +} {rpn .leftmargin. .diagramsize. +} .bottommargin. cm
     set color black
  end if
}

#-------------------------------------------------------------------------
`the_info'
{
  if !..publication..
   set font size .infofont.
   .info. = 80
   .infomargin. = .bottommargin.
   if {rpn "\.ps_file." strlen .info. <}
     .sublen. = {rpn "\.ps_file." strlen 64 inf}
     draw label {rpn "..." "\.ps_file." strlen .sublen. - .sublen. "\.ps_file." substr strcat} at {rpn .leftmargin. .rightmargin. + .diagramsize. + ..fontsize.. 2.5 * pttocm -} .infomargin. cm rotated 90
   else
     draw label "\.ps_file." at {rpn .leftmargin. .rightmargin. + .diagramsize. + ..fontsize.. 2.5 * pttocm -} .infomargin. cm rotated 90
   end if
   draw label "\.time."    at {rpn .leftmargin. .rightmargin. + .diagramsize. + ..fontsize.. pttocm -} .infomargin. cm rotated 90

  end if
}

#-------------------------------------------------------------------------
`the_axes'
{
  set axes style 1
  set color black
  set tics in
  set line width axis 0.5
  set font size .tickfont.
  set x name ""
  set y name ""

  set clip postscript off

  if .transpose.

    delete x scale
    if .axislabely.
      set x format "\yformat"
    else
      set x format off
    end if
    set x type \ytype
    if {rpn "log" "\ytype" ==}
      if {rpn .ystart. .yend. >}
        set x axis .ystart. .yend. .ybiginc. .ysmlinc.
      else
        set x axis .ystart. .yend.
      end if
    else
      set x axis .ystart. .yend. .ybiginc. .ysmlinc. labeling .ystart.
    end if

    draw x axis at bottom

    set x format off
    draw x axis at top

    if .secondx.
      delete y scale
      set y format "\x2format"
      set y type \x2type
      if {rpn "log" "\x2type" ==}
        if {rpn .x2start. .x2end. >}
          set y axis .x2start. .x2end. .x2biginc. .x2smlinc.
        else
          set y axis .x2start. .x2end.
        end if
      else
        set y axis .x2start. .x2end. .x2biginc. .x2smlinc. labeling .x2start.
      end if
      draw y axis at right
    end if

    delete y scale
    if .axislabelx.
      set y format "\xformat"
    else
      set y format off
    end if
    set y type \xtype
    if {rpn "log" "\xtype" ==}
      if {rpn .xstart. .xend. >}
        set y axis .xstart. .xend. .xbiginc. .xsmlinc.
      else
        set y axis .xstart. .xend.
      end if
    else
      set y axis .xstart. .xend. .xbiginc. .xsmlinc. labeling .xstart.
    end if

    draw y axis at left

    if {rpn .secondx. not}
      set y format off
      draw y axis at right
    end if

  else

    delete y scale
    if .axislabely.
      set y format "\yformat"
    else
      set y format off
    end if
    set y type \ytype
    if {rpn "log" "\ytype" ==}
      if {rpn .ystart. .yend. >}
        set y axis .ystart. .yend. .ybiginc. .ysmlinc.
      else
        set y axis .ystart. .yend.
      end if
    else
      set y axis .ystart. .yend. .ybiginc. .ysmlinc. labeling .ystart.
    end if

    draw y axis at left

    set y format off
    draw y axis at right

    if .secondx.
      delete x scale
      set x format "\x2format"
      set x type \x2type
      if {rpn "log" "\x2type" ==}
        if {rpn .x2start. .x2end. >}
          set x axis .x2start. .x2end. .x2biginc. .x2smlinc.
        else
          set x axis .x2start. .x2end.
        end if
      else
        set x axis .x2start. .x2end. .x2biginc. .x2smlinc. labeling .x2start.
      end if
      draw x axis at top
    end if

    delete x scale
    if .axislabelx.
      set x format "\xformat"
    else
      set x format off
    end if
    set x type \xtype
    if {rpn "log" "\xtype" ==}
      if {rpn .xstart. .xend. >}
        set x axis .xstart. .xend. .xbiginc. .xsmlinc.
      else
        set x axis .xstart. .xend.
      end if
    else
      set x axis .xstart. .xend. .xbiginc. .xsmlinc. labeling .xstart.
    end if

    draw x axis at bottom

    if {rpn .secondx. not}
      set x format off
      draw x axis at top
    end if


  end if

}

#-------------------------------------------------------------------------
`the_dataframe'
{
  set font size .tickfont.

  if .transpose.

    delete y scale
    set y type \xtype
    if {rpn "log" "\xtype" ==}
      if {rpn .xstart. .xend. >}
        set y axis .xstart. .xend. .xbiginc. .xsmlinc.
      else
        set y axis .xstart. .xend.
      end if
    else
      set y axis .xstart. .xend. .xbiginc. .xsmlinc. labeling .xstart.
    end if

    delete x scale
    set x type \ytype
    if {rpn "log" "\ytype" ==}
      if {rpn .ystart. .yend. >}
        set x axis .ystart. .yend. .ybiginc. .ysmlinc.
      else
        set x axis .ystart. .yend.
      end if
    else
      set x axis .ystart. .yend. .ybiginc. .ysmlinc. labeling .ystart.
    end if

  else

    delete x scale
    set x type \xtype
    if {rpn "log" "\xtype" ==}
      if {rpn .xstart. .xend. >}
        set x axis .xstart. .xend. .xbiginc. .xsmlinc.
      else
        set x axis .xstart. .xend.
      end if
    else
      set x axis .xstart. .xend. .xbiginc. .xsmlinc. labeling .xstart.
    end if

    delete y scale
    set y type \ytype
    if {rpn "log" "\ytype" ==}
      if {rpn .ystart. .yend. >}
        set y axis .ystart. .yend. .ybiginc. .ysmlinc.
      else
        set y axis .ystart. .yend.
      end if
    else
      set y axis .ystart. .yend. .ybiginc. .ysmlinc. labeling .ystart.
    end if

  end if

}

#-------------------------------------------------------------------------
`the_datalayout'
{
  set font size .labelfont.
  set line join 1                     # round join
  set line cap 1                      # round cap
  set symbol size .symbolsize.
  set line width symbol {rpn .symbolsize. 10 *}
  if ! .ownlinewidth.
    set line width .linewidth.
  end if
}


# ----- process restrictions -----

get_number "process" &.arg. &.noise. 0
sprintf \noise  "%.0f" .noise.
if {rpn 10 .noise. > }
  show .noise. " steps restriction"
else if {rpn 0 .noise. > }
  show .noise. " noisy copies"
end if

# ----- inverted -----

get_logical "invert" &.arg. &.invert. 0
if .invert.
  \inverted = "--invert"
end if

# ----- weighted -----

get_logical "weighted" &.arg. &.weightcolumn. 0
.argcount. += .weightcolumn.
if .weightcolumn.
  \weighted = "--weight"
end if

# ----- total -----

get_string "total" &.arg. &\total ""
if {rpn "own" "\total" ==}                    # total per data set
  .total. = 1
  .argcount. += 1
  if ..debug..
    show "own total"
  end if
else if {rpn "" "\total" == not}
  \total  = "--total '\total'"
end if

# ----- offset -----

get_logical "offset" &.arg. &.offset. 0
.argcount. += .offset.

# ----- skip -----

get_string "skip" &.arg. &\skip ""
if {rpn "" "\skip" == not}
  \skip = {rpn "-s '" "\skip" strcat "'" strcat}
end if

# ----- abs -----

get_logical "abs" &.arg. &.abs. 0
if .abs.
  \restriction = {rpn "\restriction" " --absolute" strcat}
end if

# ----- pos|neg -----

get_bitfield "all" "pos" "neg" &.arg. &.pos. &.neg.
if .pos.                              # check for positive restriction
  \restriction = {rpn "\restriction" " --positive" strcat}
else if .neg.                         # check for negative restriction
 \restriction = {rpn "\restriction" " --negative" strcat}
end if

# ----- line -----
\arg = {rpn .arg. 1 + argv}
if {rpn "line" "\arg" ==}                        # check for optional drawing restriction
  \line  = {rpn .arg. 2 + argv}                  # read line style
  if {rpn "own" "\line" ==}                      # line style per data set
   .ownline.   = 1
   .argcount. += 1
  end if
  .arg. += 2
end if

# ----- linewidth -----

get_stringOrNumber "linewidth" &.arg. &\linewidth "" &.linewidth. 1.5
if {rpn "own" "\linewidth" ==}                   # own per data set
  .ownlinewidth. = 1
  if ..debug..
    show "own linewidth"
  end if
end if
.argcount. += .ownlinewidth.

# ----- colormap -----

get_string "colormap" &.arg. &\colormap ""

if {rpn "" "\colormap" ==}                       # no colormap
  \colormap = "gray"                             # default
  .color. = 1                                    # need color definition
else if {rpn "own" "\colormap" ==}               # own per data set
  .owncolormap. = 1
  if ..debug..
    show "own colormap"
  end if
end if
.argcount. += .owncolormap.

# ----- color -----

if .color.
  get_string "color" &.arg. &\color ""
  if {rpn "" "\color" ==}                          # no color
    .color. = 0
  else if {rpn "own" "\color" ==}                  # own per data set
    .owncolor. = 1
    .argcount. += 1
  else                                             # global color
    .colormap. = 0                                 # switch off colormap
  end if
end if


# ----- label -----

get_logical "label" &.arg. &.curvelabel. 0
.argcount. += .curvelabel.

# ----- noaxes -----

get_bitfield "noaxes" "noxaxis" "noyaxis" &.arg. &.axislabelx. &.axislabely.
.axislabelx. = {rpn .axislabelx. not}
.axislabely. = {rpn .axislabely. not}

# ----- second set of axes -----

get_logical "secondx" &.arg. &.secondx. 0

if .secondx.
  \x2type      = {rpn  1 .arg. + argv}
  \x2label     = {rpn  2 .arg. + argv}
  \x2format    = {rpn  3 .arg. + argv}
  .x2start.    = {rpn  4 .arg. + argv atof}
  .x2end.      = {rpn  5 .arg. + argv atof}
  .x2Nincs.    = {rpn  6 .arg. + argv atof}
  .x2Nsubincs. = {rpn  7 .arg. + argv atof}
  if {rpn "log" "\x2type" ==}
    .x2biginc. = {rpn .x2end. log .x2start. log - .x2Nincs. 1 sup / floor 1 sup}
    .x2smlinc. = .x2Nsubincs.                  # for log axes negative sign suppresses subticks
    sprintf \x2tickmin "%.0f" {rpn .x2start. log}
    sprintf \x2tickmax "%.0f" {rpn .x2end. log}
    \x2tickmin = {rpn "10" "\x2tickmin" strcat}
    \x2tickmax = {rpn "10" "\x2tickmax" strcat}
  else
    .x2biginc. = {rpn .x2end. .x2start. - .x2Nincs. 1 sup /}
    .x2smlinc. = {rpn .x2biginc. 1 .x2Nsubincs. sup /}
    sprintf \x2tickmin "\x2format" .x2start.
    sprintf \x2tickmax "\x2format" .x2end.
  end if
  .arg. += 7
end if

# ----- axis label -----

get_string "ylabel" &.arg. &\ylabel "cumulative probability"

# ----- background -----

get_string "background" &.arg. &\bgcolor ""

# ----- back -----

get_logical "back"    &.arg. &.back.    0

# ----- clip -----

get_logical "clip"    &.arg. &.clip.    0

# ----- tight -----

get_logical "tight"    &.arg. &.tight.    0

# ----- transpose -----

get_logical "transpose"   &.arg. &.transpose.   0

# ----- aspect -----

get_number  "aspect"  &.arg. &.aspect.  1.0

# ----- frame -----

get_logical "frame"   &.arg. &.frame.   0

# ----- inch -----

get_logical "inch"   &.arg. &.inch.   0
.inch. = {rpn .inch. 1.54 * 1 +}                    # scaling factor for .size. (2.54 if inch else 1)

# ++++++++++ option parsing done ++++++++++++

.datacount. = {rpn argc 1 - .mandatorycount. .arg. + -}
if {rpn 0 .datacount. .argcount. remainder == 0 .datacount. >= and}
 .nFiles. = {rpn .datacount. .argcount. /}
 if ..debug..
   show "nFiles " .nFiles.
 end if
else
 show ""
 show "usage: plot_distribution.gri "
 show "       [ 'process' noise |          --> use NOISE (<=10) noisy copies per value"
 show "                   limit ]          --> limit distribution to LIMIT (>10) values"
 show "       [ 'invert' ]                 --> invert cumulative probability direction"
 show "       [ 'weighted' ]               --> weight distribution by secondary column value instead of number"
 show "       [ 'total' (value | 'own') ]  --> total number of observations across multiple series"
 show "       [ 'offset' ]                 --> with individual series offset"
 show "       [ 'skip' value ]             --> value to ignore in distribution"
 show "       [ 'abs' ]                    --> use absolute values"
 show "       [ 'pos' | 'neg']             --> use positive | negative values"
 show "       [ 'line' (name | 'own') ]"
 show "       [ 'linewidth' (value | 'own') ]"
 show "       [ 'colormap' (name | 'own') | 'color' (name | 'own') ]"
 show "       [ 'label' ]                  --> label each curve"
 show "       [ 'noaxes' | 'noxaxis' | 'noyaxis' ]"
 show "       [ 'secondx' & "
 show "         x2.type x2.label x2.format x2.start x2.end x2.Nincs x2.Nsubincs ]"
 show "       [ 'ylabel' string ]          --> label of cumulative probability"
 show "       [ 'background' color ]       --> fill frame with color"
 show "       [ 'back' ]                   --> draw data behind axes"
 show "       [ 'clip' ]                   --> restrict data to within frame"
 show "       [ 'tight' ]                  --> minimum margin around frame"
 show "       [ 'transpose' ]              --> transpose diagram"
 show "       [ 'aspect' y/x-ratio ]       --> frame aspect ratio"
 show "       [ 'frame' ] [ 'inch' ] size  --> diagram (frame) size in cm (or inch)"
 show "       x.type x.label x.format      --> ('linear' | 'log') theLabel (%g | %.1f | ... )"
 show "       x.start x.end x.Nincs x.Nsubincs x.scaling"
 show "       filename column [weightColumn] [total] [offset] [label] [line] [linewidth] [color]"
 show "     [ filename column ... ]"
 show "       ..."
 show ""
 show "Nincs:          number of increments for major tick labeling"
 show "Nsubincs:       number of increments for minor ticking"
 show "scaling:        factor by which data is pre-multiplied"
 show ""
 show "valid lines:    none, solid (default), dashed, dotted, dash-dotted"
 show ""
 show "valid colormaps: gray (default), red, orange, yellow,"
 show "                 green, cyan, blue, purple, magenta"
 show ""
 show "valid colors:   black (default), white, red, green, blue,"
 show "                cyan, magenta, yellow, brown, tan, orange,"
 show "                LightGray, darkslategray, ForestGreen, skyblue"
 show "                'rgb 0..1 0..1 0..1'"
 show "                'hsb 0..1 0..1 0..1'"
 show ""
 if ..debug..
   show "expecting " .argcount. " per data having " .datacount.
   .i. = 0
   while {rpn .datacount. .i. <}
     show {rpn .i. .mandatorycount. + .arg. + 1 + } ":" {rpn .i. .mandatorycount. + .arg. + 1 + argv}
     .i. += 1
   end while
 end if
 quit
end if

.size.       = {rpn  1 .arg. + argv atof .inch. *}
\xtype       = {rpn  2 .arg. + argv}
\xlabel      = {rpn  3 .arg. + argv}
\xformat     = {rpn  4 .arg. + argv}
.xstart.     = {rpn  5 .arg. + argv atof}
.xend.       = {rpn  6 .arg. + argv atof}
.xNincs.     = {rpn  7 .arg. + argv atof}
.xNsubincs.  = {rpn  8 .arg. + argv atof}
.xscale.     = {rpn  9 .arg. + argv atof}
if {rpn "log" "\xtype" ==}
  .xbiginc. = {rpn .xend. log .xstart. log - .xNincs. 1 sup / floor 1 sup}
  .xsmlinc. = .xNsubincs.                  # for log axes negative sign suppresses subticks
  sprintf \xtickmin "%.0f" {rpn .xstart. log}
  sprintf \xtickmax "%.0f" {rpn .xend. log}
  \xtickmin = {rpn "10" "\xtickmin" strcat}
  \xtickmax = {rpn "10" "\xtickmax" strcat}
else
  .xbiginc. = {rpn .xend. .xstart. - .xNincs. 1 sup /}
  .xsmlinc. = {rpn .xbiginc. 1 .xNsubincs. sup /}
  sprintf \xtickmin "\xformat" .xstart.
  sprintf \xtickmax "\xformat" .xend.
end if

\ytype    = "linear"
\yformat  = "%0.2f"
.ystart.  = 0
.yend.    = 1
.yNincs.    = 4
.yNsubincs. = 5
.yscale.    = 1

if {rpn "log" "\ytype" ==}
  .ybiginc. = {rpn .yend. log .ystart. log - .yNincs. 1 sup / floor 1 sup}
  .ysmlinc. = .yNsubincs.                 # for log axes negative sign suppresses subticks
  sprintf \ytickmin "%.0f" {rpn .ystart. log}
  sprintf \ytickmax "%.0f" {rpn .yend. log}
  \ytickmin = {rpn "10" "\ytickmin" strcat}
  \ytickmax = {rpn "10" "\ytickmax" strcat}
else
  .ybiginc. = {rpn .yend. .ystart. - .yNincs. 1 sup /}
  .ysmlinc. = {rpn .ybiginc. 1 .yNsubincs. sup /}
  sprintf \ytickmin "\yformat" .ystart.
  sprintf \ytickmax "\yformat" .yend.
end if

.arg. += .mandatorycount.

if ..debug..
  show "size " .size.
  show "xtype " "\xtype"
  show "xlabel " "\xlabel"
  show "xformat " "\xformat"
  show "xstart " .xstart.
  show "xend " .xend.
  show "xNincs " .xNincs.
  show "xNsubincs " .xNsubincs.
  show "xscale " .xscale.
  show "ytype " "\ytype"
  show "ylabel " "\ylabel"
  show "yformat " "\yformat"
  show "ystart " .ystart.
  show "yend " .yend.
  show "yNincs " .yNincs.
  show "yNsubincs " .yNsubincs.
  show "yscale " .yscale.
  show "argcount " .argcount.
end if


# ----- diagram metrics -----

the_layout

# ----- background -----

the_background

# ----- info label -----

the_info

# ----- axes behind data -----

if {rpn .clip. .back. or}
  the_dataframe
  set axes style none
  if .clip.
    set clip postscript on
  end if
else
  the_axes
end if

# ----- data layout -----

the_datalayout

# ++++++++++++++++++++++++++++++++
# +++++ loop over input data +++++
# +++++ to establish coloring ++++
# ++++++++++++++++++++++++++++++++

.datastart. = .arg.

if .owncolormap.

  if ..debug..
    show "finding colormap statistics..."
  end if

  .i. = 0

  while {rpn .nFiles. .i. <}

  \owncolormap = {rpn .arg. 2 .weightcolumn. .total. .offset. .curvelabel. .ownline. .ownlinewidth. .owncolormap. + + + + + + + + argv}
  if {rpn "\owncolormap" "gray" ==}
   .nGray. += 1
  else if {rpn "\owncolormap" "red" ==}
   .nRed. += 1
  else if {rpn "\owncolormap" "orange" ==}
   .nOrange. += 1
  else if {rpn "\owncolormap" "yellow" ==}
   .nYellow. += 1
  else if {rpn "\owncolormap" "green" ==}
   .nGreen. += 1
  else if {rpn "\owncolormap" "cyan" ==}
   .nCyan. += 1
  else if {rpn "\owncolormap" "blue" ==}
   .nBlue. += 1
  else if {rpn "\owncolormap" "purple" ==}
   .nPurple. += 1
  else if {rpn "\owncolormap" "magenta" ==}
   .nMagenta. += 1
  else
    show "colormap '\owncolormap' of file " {rpn .arg. 1 + argv} " is invalid!"
    quit
  end if

   # ---------- increase counter ---------

   .i.   += 1
   .arg. += .argcount.

  end while

end if


# ++++++++++++++++++++++++++++++++
# +++++ loop over input data +++++
# +++++        to plot       +++++
# ++++++++++++++++++++++++++++++++

.i. = 0
.arg. = .datastart.

while {rpn .nFiles. .i. <}

 # ---------- increase file counter ---------

 .i. += 1

 # ------------ read arguments for this data set -------------

 \filename = {rpn 1 .arg. + argv}
 \index    = {rpn 2 .arg. + argv}

 .arg. += 2

 if .weightcolumn.
   .arg. += 1
   \weightColumn  = {rpn .arg. argv}
 else
   \weightColumn  = ""
 end if

 if .total.
   .arg. += 1
   \total  = {rpn "--total '" .arg. argv strcat "'" strcat}
 end if

 if .offset.
   .arg. += 1
   \offset  = {rpn "--offset '" .arg. argv strcat "'" strcat}
 end if

 if .curvelabel.
   .arg. += 1
   \label  = {rpn .arg. argv}
 end if

 if .ownline.
   .arg. += 1
   \line   = {rpn .arg. argv}
 end if

 if .ownlinewidth.
   .arg. += 1
   .linewidth. = {rpn .arg. argv atof}
 end if

 if .owncolormap.
   .arg. += 1
   \colormap  =  {rpn .arg. argv}
 else if .owncolor.
   .arg. += 1
   \color  =  {rpn .arg. argv}
 end if

 show "plot_distribution.gri: \filename"


 # ------------ set curve geometry --------------

  if .ownlinewidth.
    set line width .linewidth.
  end if


 # ------------ set color --------------

 if .color.
   set color \color
 else if .colormap.                                 # loop through colormap with constant hue, increasing saturation and decreasing brightness
   if {rpn "red" "\colormap" ==}
     .iRed. += 1
     .iHSB. = .iRed.
     .nHSB. = .nRed.
     .hue. = 0
   else if {rpn "orange" "\colormap" ==}
     .iOrange. += 1
     .iHSB. = .iOrange.
     .nHSB. = .nOrange.
     .hue. = 0.083
   else if {rpn "yellow" "\colormap" ==}
     .iYellow. += 1
     .iHSB. = .iYellow.
     .nHSB. = .nYellow.
     .hue. = 0.167
   else if {rpn "green" "\colormap" ==}
     .iGreen. += 1
     .iHSB. = .iGreen.
     .nHSB. = .nGreen.
     .hue. = 0.333
   else if {rpn "cyan" "\colormap" ==}
     .iCyan. += 1
     .iHSB. = .iCyan.
     .nHSB. = .nCyan.
     .hue. = 0.5
   else if {rpn "blue" "\colormap" ==}
     .iBlue. += 1
     .iHSB. = .iBlue.
     .nHSB. = .nBlue.
     .hue. = 0.667
   else if {rpn "purple" "\colormap" ==}
     .iPurple. += 1
     .iHSB. = .iPurple.
     .nHSB. = .nPurple.
     .hue. = 0.75
   else if {rpn "magenta" "\colormap" ==}
     .iMagenta. += 1
     .iHSB. = .iMagenta.
     .nHSB. = .nMagenta.
     .hue. = 0.833
   else
     .iGray. += 1
     .iHSB. = .iGray.
     .nHSB. = .nGray.
     .hue. = 0
   end if

   if ! .owncolormap.
     .iHSB. = .i.
     .nHSB. = .nFiles.
   end if

   if {rpn "gray" "\colormap" ==}
     set_graySB &.saturation. &.brightness. .iHSB. .nHSB.
   else
     set_SB &.saturation. &.brightness. .iHSB. .nHSB.
   end if

   set color hsb .hue. .saturation. .brightness.
 end if


 # ------------ process distribution --------------

 if .noise.
  open "make_cumprob \inverted \weighted \weightColumn \total \offset \restriction \skip -n \noise -c \index \"\filename\" |"
 else
  open "make_cumprob \inverted \weighted \weightColumn \total \offset \restriction \skip           -c \index \"\filename\" |"
 end if


 # ------------  draw distribution --------------

 if {rpn "none" "\line" == !}
  if .transpose.
    read columns y x
    y *= .xscale.
  else
    read columns x y
    x *= .xscale.
  end if

  if {rpn "solid" "\line" ==}
    set dash off
  else if {rpn "dashed" "\line" ==}
    set dash {rpn ..linewidth.. pttocm 3 *} {rpn ..linewidth.. pttocm 3 *}
  else if {rpn "dotted" "\line" ==}
    set dash {rpn ..linewidth.. pttocm 0.0 *} {rpn ..linewidth.. pttocm 2 *}
  else if {rpn "dash-dotted" "\line" ==}
    set dash {rpn ..linewidth.. pttocm 3 *} {rpn ..linewidth.. pttocm 2 *} {rpn ..linewidth.. pttocm 0.0 *} {rpn ..linewidth.. pttocm 2 *}
  end if

  draw curve
 end if


 # ------------- draw label ----------------

 if .curvelabel.
   draw label "\label" at {rpn x ..num_col_data.. .i. * .nFiles. 1 + / @ xusertocm "x" width + } {rpn y ..num_col_data.. .i. * .nFiles. 1 + / @ yusertocm "x" ascent "x" descent + 3 / - } cm
 end if


end while


# +++++ draw axes in front of data +++++


if {rpn .clip. .back. or}
  the_axes
end if


# ----- axis labels -----

set font size .axesfont.
set color black

if .transpose.

  if .secondx.
    draw label "\x2label" centered at {rpn .leftmargin. .rightmargin. + .diagramsize. + "\x2label" descent .axesfont. 3 / pttocm + -} {rpn .bottommargin. .aspect. .diagramsize. * 2 / +} cm rotated 90
  end if
  if .axislabelx.
    draw label "\xlabel"  centered at {rpn "\xlabel" ascent .axesfont. 3 / pttocm +} {rpn .bottommargin. .aspect. .diagramsize. * 2 / +} cm rotated 90
  end if
  if .axislabely.
    draw label "\ylabel"  centered at {rpn .leftmargin. .diagramsize. 2 / +} {rpn "\ylabel" descent .axesfont. 3 / pttocm +} cm
  end if

else

  if .secondx.
    draw label "\x2label" centered at {rpn .leftmargin. .diagramsize. 2 / +} {rpn .bottommargin. .topmargin. + .aspect. .diagramsize. * + "\x2label" ascent .axesfont. 3 / pttocm + -} cm
  end if
  if .axislabelx.
    draw label "\xlabel"  centered at {rpn .leftmargin. .diagramsize. 2 / +} {rpn "\xlabel" descent .axesfont. 3 / pttocm +} cm
  end if
  if .axislabely.
    draw label "\ylabel"  centered at {rpn "\ylabel" ascent .axesfont. 3 / pttocm +} {rpn .bottommargin. .aspect. .diagramsize. * 2 / +} cm rotated 90
  end if

end if
