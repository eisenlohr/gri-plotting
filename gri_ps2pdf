#!/usr/bin/env python3

import os
import sys
import re
import argparse
import subprocess

from pathlib import Path

parser = argparse.ArgumentParser(description="Convert a gri output file from PS to PDF.")
parser.add_argument('-k','--keep', action='store_true',
			        help='keep both postscript versions of original')
parser.add_argument('-e','--keepeps', action='store_true',
			      help='keep encapsulated postscript versions of original')
parser.add_argument('-p','--keepps', action='store_true',
			        help='keep original postscript version')
parser.add_argument('file',nargs='+',
                    help='postscript file(s) to convert')

args = parser.parse_args()

head  = re.compile(r'^\%\%(\w*):\s+(.*)$')
atend = re.compile(r'^\%\%(\w*):\s+\(atend\)$')
tmplt = re.compile(r'^\%\%TemplateBox:.*?$')

for file in map(Path,args.file):
  if file.exists():
    print('\x1b[2m'+str(file.parent)+'/'+'\x1b[0m'+str(file.name))
    epsFile = file.with_suffix('.eps')
    pdfFile = file.with_suffix('.pdf')
    with open(file) as inFile:
      input = inFile.readlines()

    d = dict()
    while input[-1].strip() != '%%Trailer':
      line = input.pop().strip()
      m = head.search(line)
      if m is not None:
        d[m.group(1)] = m.group(2)

    if epsFile.exists():
      os.remove(epsFile)
    with open(epsFile,'w') as outFile:
      for line in input:
        line = line.strip()
        m = atend.search(line)
        if m is not None:
          line = f'%%{m.group(1)}: {d[m.group(1)]}'
        elif tmplt.search(line) is not None:
          line = f'%%TemplateBox: {d["BoundingBox"]}'
        outFile.write(line+'\n')

    try:
      subprocess.call(["epstopdf",epsFile])
    except:
      try:
        subprocess.call(["pstopdf",epsFile])
        print("using 'pstopdf' instead of 'epstopdf'")
      except:
        subprocess.call(["ps2pdf","-dEPSCrop",epsFile])
        print("using 'ps2pdf' instead of 'epstopdf'")

    if not (args.keep or args.keepeps):                          os.remove(epsFile)
    if not (args.keep or args.keepps) \
       and pdfFile.exists() \
       and os.path.getmtime(pdfFile) >= os.path.getmtime(file) : os.remove(file)
