#!/usr/bin/env python3

import os
import sys
import argparse
import numpy as np
import pandas as pd

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

parser = argparse.ArgumentParser(description = """
Extract two columns of point data for plotting.
""")

parser.add_argument('-x', help='x column label')
parser.add_argument('-y', help='y column label')
parser.add_argument('-z', help='z column label')
parser.add_argument('file', help='name of data file')

args = parser.parse_args()

args.x = int(args.x)-1 if args.x.isdigit() else args.x
args.y = int(args.y)-1 if args.y.isdigit() else args.y
args.z = int(args.z)-1 if args.z is not None and args.z.isdigit() else args.z

if os.path.exists(args.file):
    with open(args.file) as f:
        content = f.read()                                     # parse the given file
else:
    content = sys.stdin.read()                                 # or default to stdin

data = np.hstack((pd.read_csv(StringIO(content),
                              sep='\s+',
                              comment='#',
                              usecols=[args.x],
                             ).to_numpy().astype(float),
                  pd.read_csv(StringIO(content),
                              sep='\s+',
                              comment='#',
                              usecols=[args.y],
                             ).to_numpy().astype(float),
                  pd.read_csv(StringIO(content),
                              sep='\s+',
                              comment='#',
                              usecols=[args.z if args.z is not None else args.x],
                             ).to_numpy().astype(float),
                  ))

for item in data:                                                           # output data to stdout
	print(f'{item[0]}\t{item[1]}'+('' if args.z is None else f'\t{item[2]}'))
