#!/usr/bin/env python3

import os
import sys
import math
import argparse
import pandas as pd
import numpy as np

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

rng = np.random.default_rng()

parser = argparse.ArgumentParser()

parser.add_argument('-c','--column', default=1,
                    help='value column')
parser.add_argument('-w','--weight', default=None,
                    help='weight column')
parser.add_argument('-n','--noise','--limit', type=int, default=0,
                    help='add noise (half of minimum value) to quantized values and return NOISE<=10 copies per value or limit the number of values used from the distribution to LIMIT>10')
parser.add_argument('-s','--skip', type=float,
                    help='value to skip')
parser.add_argument('--total', type=float, default=0,
                    help='total number of observations (or cummulative weighted value) across multiple series')
parser.add_argument('--offset', type=float, default=0,
                    help='number of observations (or cummulative weighted value) to offset origin')
parser.add_argument('--normalized', action='store_true',
                    help='offset is normalized to 1')
parser.add_argument('--invert', action='store_true',
                    help='invert sorting order')
parser.add_argument('--absolute', action='store_true',
                    help='use absolute magnitude of values')
parser.add_argument('--positive', action='store_true',
                    help='restrict output to positive (>0) values')
parser.add_argument('--negative', action='store_true',
                    help='restrict output to negative (<0) values')
parser.add_argument('file', help='name of data file', nargs='?', default=None)

args = parser.parse_args()

value  = int(args.column)-1 if args.column.isdigit() else args.column
weight = value if args.weight is None else int(args.weight)-1 if args.weight.isdigit() else args.weight
cols = np.array([value,weight])

with sys.stdin if args.file is None else open(args.file) as f:
    content = f.read()
try:
    df = pd.read_csv(StringIO(content),
                    sep='\s+',
                    comment='#',
                    )
except pd.errors.ParserError:
    df = pd.read_csv(StringIO(content),
                    comment='#',
                    )

data = df[df.columns[cols] if cols.dtype==int else cols].to_numpy().astype(float)
data = data[data[:,0].flatten() != args.skip,:] if args.skip else data
data[:,1] = 1 if args.weight is None else data[:,1]

if args.noise > 0 and args.noise <= 10:                    # if noise requested
  data = np.repeat(data,args.noise,axis=0)
  data[:,0] += min(abs(data[:,0]))*(rng.random(len(data))-0.5)    # random scatter by half of minimum value in dataset

data = data[np.lexsort((data[:,1],data[:,0]))]             # sort the data small to large

if args.positive:
    for i in xrange(len(data)):                            # walk through data
        if data[i,0] > 0.0: break                          # first positive value in sorted list
    data = data[i:]                                        # omit all non-positive values

if args.negative:
    for i in xrange(len(data)):                            # walk through data
        if data[i,0] >= 0.0: break                         # first non-negative value in sorted list
    data = data[:i]                                        # omit all non-negative values

if args.absolute: data[:,0] = abs(data[:,0])               # restrict to absolute values ?

data = data[::-1 if args.invert else 1]                    # reverse data sorting if requested

index = list(range(int(math.floor((len(data)-1)/args.noise/2)),
                   len(data),
                   int(math.floor((len(data)-1)/args.noise)))
             if args.noise > 10 and args.noise < len(data) else
             range(len(data))
            )

fullScale = max(args.total, (len(data) if args.weight is None else sum(data[:,1])))
F = args.offset if args.normalized else args.offset/fullScale

for a,b in zip([-1]+index[:-1],index):
  dF = sum(data[a+1:b+1,1])/fullScale
  print("%e\t%g\n%e\t%g"%(data[b,0],F,data[b,0],F+dF))
  F += dF
